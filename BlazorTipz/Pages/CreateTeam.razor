@page "/createTeam"

@using BlazorTipz.Components
@using DataLibrary
@using BlazorTipz.Data
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Configuration
@using Microsoft.IdentityModel.Tokens
@using Radzen
@using System.Text.Json
@using System.Security.Cryptography
@using System.Diagnostics;
@using System.Text
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt

@inject NavigationManager _navigationManager
@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationComponent _auth
@inject TokenServerAuthenticationStateProvider GetAuthenticationStateAsync

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

<PageTitle>Create Team</PageTitle>

<AuthorizeView Roles="Admin" Context="someContext">
    <Authorized>
        <h1 class="center">Fill in the form</h1>
        <p class="d-flex justify-content-center">to create a new team!</p>
<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="TeamDto" Data=@teamDto Submit=RegisterTeam>     
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Team Name" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="team" @bind-Value=@teamDto.teamName Class="w-100" />
                                <RadzenLengthValidator Component="team" Min="3" Text="Team name should be alteast 3 characters long" Popup=@popup Style="position: absolute" />
                    </div>        
                </div>
                        <div class="row mb-5">
                            <div class="col-md-4" style="align-self: center;">
                                <RadzenLabel Text="Set Team Leader" />
                            </div>
                            <div class="col">
                                <RadzenDropDown @bind-Value="teamDto.teamLeader" Placeholder="ID" Data="@people" style="width: 100%;" TextProperty="employmentId" ValueProperty="employmentId" Name="employmentId" />
                            </div>
                        </div>
                    <div class="center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                   </div>
                <div class="center">
                    <h1>@Checker</h1>
                </div>
            </RadzenTemplateForm> 
        </div>
    </div>
</div>

<h1 class="center">User List</h1><RadzenButton Click="UpdateDB" Icon="refresh" ButtonStyle="ButtonStyle.Secondary" />

 <RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" 
        FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@people" TItem="User" ColumnWidth="300px" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
        <RadzenDataGridColumn TItem="User" Property="employmentId" Filterable="false" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="User" Property="fName" Title="First Name" Frozen="true" Width="140px" />
        <RadzenDataGridColumn TItem="User" Property="lName" Title="Last Name" Width="140px" />
        </Columns>
    </RadzenDataGrid>

</Authorized>
<NotAuthorized>
    <h1 class="center">You are not Authorized for this</h1>
</NotAuthorized>
</AuthorizeView>

@code {
    bool popup;
    bool isLoading = false;
    public string Checker { get; set; }

    Team Team = new Team();
    TeamDto teamDto = new TeamDto();
    User User = new User();
    TeamDto teamdb = new TeamDto();
    List<Userdb> usersdb;
    List<User> people;
    List<TeamDto> teamList;

    public async Task<ActionResult<Team>> RegisterTeam(TeamDto request)
    {

        Team.teamName = request.teamName;
        Team.teamLeader = request.teamLeader;

        try
        {
            var sql = "insert into Teams (teamName, teamLeader) values (@teamName, @teamLeader);";
            await _data.SaveData(sql, new { teamName = Team.teamName, teamLeader = Team.teamLeader }, _config.GetConnectionString("default"));

            User.teamid = await getTeamId(request.teamName);

            var sql3 = "update Users set team='"+User.teamid+"' where employmentId='"+teamDto.teamLeader+"';";

            await _data.SaveData(sql3, new { team = User.teamid, empemploymentId = teamDto.teamLeader }, _config.GetConnectionString("default"));
            Checker = "Team Created and users added!";
            if (checkIfRoleUser())
            {
                var sql4 = "update Users set role='Team Leader' where employmentId='" + teamDto.teamLeader + "';";
                await _data.SaveData(sql4, new { role = "Team Leader", empemploymentId = teamDto.teamLeader }, _config.GetConnectionString("default"));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            Checker = "Team already exists!";
        }
        return Team;
    }    

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from Users";
        people = await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }
    //Check for updates to the database
    protected async Task UpdateDB()
    {
        string sql = "select * from Users";
        people = await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }

    private async Task<int?> getTeamId(string teamname) 
    {
        var sql = "SELECT * FROM Teams WHERE teamName = '" + teamname +"';";
        teamList = await _data.LoadData<TeamDto, dynamic>(sql, new { teamName = teamDto.teamName }, _config.GetConnectionString("default"));
        teamdb = teamList[0];
        int? teamid = teamdb.teamid;
        return teamid;
    }

    private bool checkIfRoleUser() 
    {
        //search each user in people for employmentId
        foreach (User user in people)
        {
            if (user.employmentId == teamDto.teamLeader)
            {
                if (user.role == "User")
                {
                    return true;
                }
            }
        }
        return false;
    }
}