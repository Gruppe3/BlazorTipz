@page "/register"

@using DataLibrary
@using BlazorTipz.Data
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Configuration
@using Microsoft.IdentityModel.Tokens
@using Radzen
@using System.Text.Json
@using System.Security.Cryptography
@using System.Diagnostics;
@using System.Text
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt

@inject NavigationManager _navigationManager
@inject IDataAccess _data
@inject IConfiguration _config

<h1 class="center">Fill in the form</h1>
<p class="d-flex justify-content-center">to register a user</p>

<!--
<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="User" Data=@User Submit=RegisterUser>
                    <div class="row mb-5">
                        <div class="col-md-4" style="align-self: center;">
                            <RadzenLabel Text="Firstname" />
                        </div>
                        <div class="col">
                        <RadzenTextBox style="display: block" Name="fName" @bind-Value=@User.fName Class="w-100" />
                        <RadzenLengthValidator Component="fName" Min="3" Text="First name should be at least 3 characters" Popup=@popup Style="position: absolute" />
                        <RadzenLengthValidator Component="fName" Max="20" Text="First name should be at most 10 characters" Popup=@popup Style="position: absolute" />
                        </div>
                    </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Lastname" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="lName" @bind-Value=@User.lName Class="w-100" />
                        <RadzenLengthValidator Component="l_name" Min="3" Text="Last name should be at least 3 characters" Popup=@popup Style="position: absolute" />
                        <RadzenLengthValidator Component="l_name" Max="20" Text="Last name should be at most 10 characters" Popup=@popup Style="position: absolute" />
                    </div>
                    </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Email" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="email" @bind-Value=@User.email Class="w-100" />
                        <RadzenRequiredValidator Component="email" Text="Email is required" Popup=@popup Style="position: absolute" />
                        <RadzenEmailValidator Component="email" Text="Provide a valid email address" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Password" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="passwordHash" @bind-Value=@User.passwordHash Class="w-100" type="password" />
                        <RadzenLengthValidator Component="passwordHash" Min="8" Text="Password name should be at least 8 characters" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                    <div class="center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                   </div>
            </RadzenTemplateForm> 
        </div>
    </div>
</div>-->
<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="UserDto" Data=@userDto Submit=Register>
                 <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="ID" />
                    </div>
                    <div class="col">
                        <RadzenNumeric style="display: block" Name="id" @bind-Value=@userDto.id Class="w-100" />
                    </div>
                </div>       
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Password" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="password" @bind-Value=@userDto.password Class="w-100" type="password" />
                        <RadzenLengthValidator Component="password" Min="8" Text="Password name should be at least 8 characters" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                    <div class="center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                   </div>
            </RadzenTemplateForm> 
        </div>
    </div>
</div>
<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="UserDto" Data=@userDto Submit=Login>
                 <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="ID" />
                    </div>
                    <div class="col">
                        <RadzenNumeric style="display: block" Name="id" @bind-Value=@userDto.id Class="w-100" />
                    </div>
                </div>       
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Password" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="password" @bind-Value=@userDto.password Class="w-100" type="password" />
                        <RadzenLengthValidator Component="password" Min="8" Text="Password name should be at least 8 characters" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                    <div class="center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                   </div>
            </RadzenTemplateForm> 
        </div>
    </div>
</div>

<!--    
<h1 class="center">User List</h1><RadzenButton Click="UpdateDB" Icon="refresh" ButtonStyle="ButtonStyle.Secondary" />
</div>
 <RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" 
        FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@people" TItem="User" ColumnWidth="300px" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
        <RadzenDataGridColumn TItem="User" Property="id" Filterable="false" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="User" Property="fName" Title="First Name" Frozen="true" Width="140px" />
        <RadzenDataGridColumn TItem="User" Property="lName" Title="Last Name" Width="140px" />
        </Columns>
    </RadzenDataGrid>
        -->
@code {
    bool popup;
    bool isLoading = false;
    
    User User = new User();

    UserDto userDto = new UserDto();

    List<User> people;


    /* private async Task RegisterUser()
    {

    var sql = "insert into Users (fName, lName password) values (@fName, @lName, @password);";

    await _data.SaveData(sql, new { fName = RegisterF.fName, lName = RegisterF.lName, passwordHash = RegisterF.passwordHash }, _config.GetConnectionString("default"));

        }*/

    public async Task<ActionResult<User>> Register(UserDto request)
    {
        CreatePasswordHash(request.password, out byte[] passwordHash, out byte[] passwordSalt);

        User.id = request.id;
        User.passwordHash = passwordHash;
        User.passwordSalt = passwordSalt;

        return User;
    }

    public async Task<ActionResult<string>> Login(UserDto request)
    {
        if (User.id != request.id)
        {
            return "User not found";
        }
        if (!VerifyPasswordHash(request.password, User.passwordHash, User.passwordSalt))
        {
            return "Wrong password";
        }

        string token = CreateToken(User);
        return token;
    }

    private string CreateToken(User user)
    {
        var claims = new List<Claim>
            {
            new Claim(ClaimTypes.Name, user.id.ToString())
        };

        var key = new SymmetricSecurityKey(System.Text.Encoding.UTF8.GetBytes(_config.GetSection("AppSettings:Token").Value));

        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha512Signature);

        var token = new JwtSecurityToken
            (
                claims: claims,
                expires: DateTime.Now.AddDays(1),
                signingCredentials: creds
            );

        var jwt = new JwtSecurityTokenHandler().WriteToken(token);


        return jwt;
    }

    private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
    {
        using (var hmac = new HMACSHA512())
        {
            passwordSalt = hmac.Key;
            passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
        }
    }

    private bool VerifyPasswordHash(string password, byte[] passwordHash, byte[] passwordSalt)
    {
        using (var hmac = new HMACSHA512(passwordSalt))
        {
            var computedHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
            return computedHash.SequenceEqual(passwordHash);
        }
    }


    /*protected override async Task OnInitializedAsync()
            {
            string sql = "select * from Users";
            people = await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }

    //Check for updates to the database

    protected async Task UpdateDB(){
        string sql = "select * from Users";
        people = await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }*/

    
}
