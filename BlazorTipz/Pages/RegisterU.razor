@page "/register"

@using BlazorTipz.Components
@using DataLibrary
@using BlazorTipz.Data
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Configuration
@using Microsoft.IdentityModel.Tokens
@using Radzen
@using System.Text.Json
@using System.Security.Cryptography
@using System.Diagnostics;
@using System.Text
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt

@inject NavigationManager _navigationManager
@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationComponent _auth

<h1 class="center">Fill in the form</h1>
<p class="d-flex justify-content-center">to register a user</p>


<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="UserDto" Data=@userDto Submit=Register>
                 <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="ID" />
                    </div>
                    <div class="col">
                        <RadzenNumeric style="display: block" Name="id" @bind-Value=@userDto.employmentId Class="w-100" />
                    </div>
                </div>       
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Password" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="password" @bind-Value=@userDto.password Class="w-100" type="password" />
                        <RadzenLengthValidator Component="password" Min="8" Text="Password name should be at least 8 characters" Popup=@popup Style="position: absolute" />
                    </div>        
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Set role" /> 
                    </div>
                    <div class="col">
                        <RadzenDropDown @bind-Value="userDto.role" Placeholder="User" Data="@roles" style="width: 100%;" TextProperty="role" ValueProperty="role" Name="Role" />
                    </div>
                </div>
                    <div class="center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                   </div>
                <div class="center">
                    <h1>@Checker</h1>
                </div>
            </RadzenTemplateForm> 
        </div>
    </div>
</div>


<!--    
<h1 class="center">User List</h1><RadzenButton Click="UpdateDB" Icon="refresh" ButtonStyle="ButtonStyle.Secondary" />
</div>
 <RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" 
        FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@people" TItem="User" ColumnWidth="300px" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
        <RadzenDataGridColumn TItem="User" Property="employmentId" Filterable="false" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="User" Property="fName" Title="First Name" Frozen="true" Width="140px" />
        <RadzenDataGridColumn TItem="User" Property="lName" Title="Last Name" Width="140px" />
        </Columns>
    </RadzenDataGrid>
        -->
@code {
    bool popup;
    bool isLoading = false;
    public string Checker { get; set; }

    User User = new User();

    UserDto userDto = new UserDto();

    List<User> people;

    List<Role> roles = new List<Role>()
{
        new Role() { roleId = 1, role = "User" },
        new Role() { roleId = 2, role = "Team Leader" },
        new Role() { roleId = 3, role = "Admin" }
        //Remember to remove team leader from the list when the app is deployed
    };


    public async Task<ActionResult<User>> Register(UserDto request)
    {
        _auth.CreatePasswordHash(request.password, out byte[] passwordHash, out byte[] passwordSalt);

        User.employmentId = request.employmentId;
        User.passwordHash = passwordHash;
        User.passwordSalt = passwordSalt;
        User.role = request.role;

        try
        {
            var sql = "insert into Users (employmentId, passwordHash, passwordSalt, role) values (@employmentId, @passwordHash, @passwordSalt, @role);";

            await _data.SaveData(sql, new { employmentId = User.employmentId, passwordSalt = User.passwordSalt, passwordHash = User.passwordHash, role = User.role }, _config.GetConnectionString("default"));
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            Checker = "User already exists";
        }
    return User;
    }    
}
