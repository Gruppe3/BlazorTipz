<!--Namespace-->
@page "/teamView"

<!--Accesses classes defined here-->
@using Microsoft.AspNetCore.Components;
@using BlazorTipz.Data;
@using BlazorTipz.ViewModels
@using BlazorTipz.ViewModels.Team
@using BlazorTipz.ViewModels.User
@using BlazorTipz.ViewModels.Suggestion
@using Microsoft.AspNetCore.Mvc
@using Radzen

<!--Injects from program-->
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject IUserManager _userManager
@inject ITeamManager _teamManager

<AuthorizeView>
    <Authorized>
        <h1 class="center">Team @currentTeam.name</h1>
        <h1 class="center">Suggestion List <RadzenButton Click="UpdateDB" Icon="refresh" ButtonStyle="ButtonStyle.Secondary" Style="margin-left: 1rem;"/></h1>
<RadzenDataGrid Data="@team" TItem="SuggViewmodel" AllowPaging="true" PageSize="10">
            <RadzenDataGridColumn TItem="SuggViewmodel" Title="Title" Property="Title" Filterable="false" Frozen="true" Width="70px" TextAlign="TextAlign.Center"/>
            <RadzenDataGridColumn TItem="SuggViewmodel" Title="Owner" Property="OwnerTeam" Frozen="true" Width="140px" />
            <RadzenDataGridColumn TItem="SuggViewmodel" Title="Creator" Property="Creator" Width="140px" />
        </RadzenDataGrid>
     </Authorized>
</AuthorizeView>

@code {
    public UserViewmodel currentUser = new UserViewmodel();
    public TeamViewmodel currentTeam = new TeamViewmodel();
    UserViewmodel CUser;
    TeamViewmodel Cteam;

    List<SuggViewmodel> team = new List<SuggViewmodel>();
    List<TeamViewmodel> teams = new List<TeamViewmodel>();

    public string TeamCheck { get; set; }
    public string teamU { get; set; }


    //Get team from user
    protected override async Task OnInitializedAsync()                   
    {
        
        var token = await _localStorage.GetItemAsync<string>("token");
        if (token != null)
        {
            (UserViewmodel user, string err) = await _userManager.getCurrentUser(token);
            TeamViewmodel team = await _teamManager.getTeam(user.teamId);
            if (err != null)
            {
                return;
            }

            currentUser = user;
            currentTeam = team;
        }

        var CurrentUser = _userManager.getCurrentUser();
        teams = await _teamManager.updateTeamsList();
        if (CurrentUser != null)
        {
            CUser = CurrentUser;
            Cteam = await _teamManager.getTeam(CUser.teamId);
            teamU = Cteam.name;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    //Update DB
    public void UpdateDB()
    {
        NavigationManager.NavigateTo("/teamView", true);
    }
}
