<!--Namespace-->
@page "/teamViewDemo"

<!--Accesses classes defined here-->
@using Microsoft.AspNetCore.Components;
@using BlazorTipz.Data;
@using BlazorTipz.ViewModels
@using BlazorTipz.ViewModels.Team
@using BlazorTipz.ViewModels.User
@using BlazorTipz.ViewModels.Suggestion
@using Microsoft.AspNetCore.Mvc
@using Radzen

<!--Injects from program-->
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject IUserManager _userManager
@inject ITeamManager _teamManager
@inject ISuggestionManager _suggestionManager
@inject DialogService DialogService


<AuthorizeView>
	<Authorized>
		<h1>TestSide </h1>
		<h3>Komponent for å demonstrere visning av fler-team relasjon</h3>
		<div>
		    
		</div>
        <h1 class="center">Team @CurrentTeam.name</h1>
		

        
    </Authorized>
    <NotAuthorized>
        <h1>Ikke mye å se her uten å være logget inn</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    public UserViewmodel CurrentUser = new();
    public TeamViewmodel CurrentTeam = new();

    List<TeamViewmodel> teams = new();
    List<SuggViewmodel> teamSug = new();

    List<TeamMemberViewmodel> TeamMemView = new List<TeamMemberViewmodel>();
    string? Err = "No error";



    //Get team from user
    protected override async Task OnInitializedAsync()
    {
        var token = await _localStorage.GetItemAsync<string>("token");
        if (token == null || token == "") { NavigationManager.NavigateTo("/login"); return; }

        (UserViewmodel? user, string err) = await _userManager.getCurrentUser(token);
        if (user == null || err != null) { NavigationManager.NavigateTo("/login"); return; }

        TeamViewmodel team = await _teamManager.getTeam(user.teamId);
        CurrentUser = user;
        CurrentTeam = team;

        teams = await _teamManager.updateTeamsList();

        //Get team suggestions
        teamSug = await _suggestionManager.GetSuggestionsOfTeam(CurrentTeam.id);
    }
	
	
    async Task ShowCloseableFromOverlayDialog(string title, string creator, string description)
    {
        await DialogService.OpenAsync($"{title} by {creator}", ds =>
    @<div>

        <p>@description</p>
    </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    /*===============================================*/
    public async Task Refresh()
    {
        Err = string.Empty;
        CurrentUser = _userManager.getCurrentUser();
        if (CurrentUser != null)
        {
            string EmpId = CurrentUser.employmentId;
            (TeamMemView, Err) = await _teamManager.GetTeamMembersByUser(EmpId);
        }
    }
    public async Task ShowAll()
    {
        Err = string.Empty;
        (TeamMemView, Err) = await _teamManager.GetAllTeamMembers();
    }
}
