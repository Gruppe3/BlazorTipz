@page "/createTeam"

@using BlazorTipz.ViewModels
@using BlazorTipz.ViewModels.Team
@using BlazorTipz.ViewModels.User
@using BlazorTipz.Components
@using DataLibrary
@using BlazorTipz.Data
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Configuration
@using Microsoft.IdentityModel.Tokens
@using Radzen
@using System.Text.Json
@using System.Security.Cryptography
@using System.Diagnostics;
@using System.Text
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt

@inject NavigationManager _navigationManager
@inject IUserManager _userManager

@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationComponent _auth
@inject TokenServerAuthenticationStateProvider GetAuthenticationStateAsync

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

<PageTitle>Create Team</PageTitle>

<AuthorizeView Roles="Admin" Context="someContext">
    <Authorized>
        <h1 class="center">Fill in the form</h1>
        <p class="d-flex justify-content-center">to create a new team!</p>
<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="TeamDto" Data=@teamDto Submit=RegisterTeam>     
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Team Name" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="team" @bind-Value=@teamDto.teamName Class="w-100" />
                                <RadzenLengthValidator Component="team" Min="3" Text="Team name should be alteast 3 characters long" Popup=@popup Style="position: absolute" />
                    </div>        
                </div>
                        <div class="row mb-5">
                            <div class="col-md-4" style="align-self: center;">
                                <RadzenLabel Text="Set Team Leader" />
                            </div>
                            <div class="col">
                                <RadzenDropDownDataGrid @bind-Value=@teamDto.teamLeader FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowVirtualization="true"
                                                        AllowFiltering="false" AllowClear="true" Data=@people TextProperty="employmentId" Placeholder="ID" ValueProperty="employmentId" Class="w-100">
                                    <Columns>
                                        <RadzenDropDownDataGridColumn Property="employmentId" Title="User ID" />
                                        <RadzenDropDownDataGridColumn Property="fName" Title="Firstname" />
                                        <RadzenDropDownDataGridColumn Property="lName" Title="LastName" />
                                    </Columns>
                                    
                                </RadzenDropDownDataGrid>
                            </div>
                        </div>
                    <div class="center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                   </div>
            </RadzenTemplateForm> 
        </div>
    </div>
</div>
        <h1 class="center">Fill in the form</h1>
        <p class="d-flex justify-content-center">to add a new team member! ps: to be optimized</p>
<div class="container my-4">
            <div class="row">
                <div class="col-lg-6 offset-lg-3">
                    <RadzenTemplateForm TItem="UserDto" Data=@userdto Submit=AddTeamMember>
                       <div class="row mb-5">
                            <div class="col-md-4" style="align-self: center;">
                                <RadzenLabel Text="Team Name" />
                            </div>
                            <div class="col">
                                <RadzenDropDownDataGrid @bind-Value=@userdto.teamName FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowVirtualization="true"
                                                        AllowFiltering="true" AllowClear="true" Data=@teams TextProperty="teamName" Placeholder="Team" ValueProperty="teamName" Class="w-100">
                            <Columns>
                                <RadzenDropDownDataGridColumn Property="teamid" Title="Team ID"/>
                                <RadzenDropDownDataGridColumn Property="teamName" Title="Team Name"/>
                            </Columns>

                        </RadzenDropDownDataGrid>
                            </div>
                        </div>
                
                      <div class="row mb-5">
                            <div class="col-md-4" style="align-self: center;">
                                <RadzenLabel Text="Set member employee ID" />
                            </div>
                            <div class="col">
                                <RadzenDropDownDataGrid @bind-Value=@userdto.employmentId FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowVirtualization="true"
                                                        AllowFiltering="false" AllowClear="true" Data=@people TextProperty="employmentId" Placeholder="ID" ValueProperty="employmentId" Class="w-100">
                                    <Columns>
                                        <RadzenDropDownDataGridColumn Property="employmentId" Title="User ID" />
                                        <RadzenDropDownDataGridColumn Property="fName" Title="Firstname" />
                                        <RadzenDropDownDataGridColumn Property="lName" Title="LastName" />
                                    </Columns>

                                </RadzenDropDownDataGrid>
                            </div>
                         </div>
                        <div class="center">
                            <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                        </div>
                        <div class="center">
                            <h1>@Checker</h1>
                        </div>
                    </RadzenTemplateForm>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="Team Leader" Context="someContext">
    <Authorized>
        <h1 class="center">Fill in the form</h1>
        <p class="d-flex justify-content-center">to add a new team member to @team!</p>
        <div class="container my-4">
            <div class="row">
                <div class="col-lg-6 offset-lg-3">
                    <RadzenTemplateForm TItem="UserDto" Data=@userdto Submit=AddTeamMember>

                        <div class="row mb-5">
                            <div class="col-md-4" style="align-self: center;">
                                <RadzenLabel Text="Set member employee ID" />
                            </div>
                            <div class="col">
                                <RadzenDropDownDataGrid @bind-Value=@userdto.employmentId FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowVirtualization="true"
                                                        AllowFiltering="false" AllowClear="true" Data=@people TextProperty="employmentId" Placeholder="ID" ValueProperty="employmentId" Class="w-100">
                                    <Columns>
                                        <RadzenDropDownDataGridColumn Property="employmentId" Title="User ID" />
                                        <RadzenDropDownDataGridColumn Property="fName" Title="Firstname" />
                                        <RadzenDropDownDataGridColumn Property="lName" Title="LastName" />
                                    </Columns>

                                </RadzenDropDownDataGrid>
                            </div>
                        </div>
                        <div class="center">
                            <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                        </div>
                        <div class="center">
                            <h1>@Checker</h1>
                        </div>
                    </RadzenTemplateForm>
                </div>
            </div>
        </div>
</Authorized>
</AuthorizeView>
<AuthorizeView Roles="User">
    <Authorized>
    <h1 class="center">You are not Authorized to view this page</h1>
    </Authorized>
</AuthorizeView>

@code {
    bool popup;
    bool isLoading = false;
    public string Checker { get; set; }
    public string team { get; set; }

    Team Team = new Team();
    TeamDto teamDto = new TeamDto();
    User User = new User();
    UserDto userdto = new UserDto();
    TeamDto teamdb = new TeamDto();
    List<User> people;
    List<Team> teams;

    public async Task<ActionResult<Team>> RegisterTeam(TeamDto request)
    {

        Team.teamName = request.teamName;
        Team.teamLeader = request.teamLeader;

        try
        {
            var sql = "insert into Teams (teamName, teamLeader) values (@teamName, @teamLeader);";
            await _data.SaveData(sql, new { teamName = Team.teamName, teamLeader = Team.teamLeader }, _config.GetConnectionString("default"));

            User.teamid = await getTeamId(request.teamName);

            var sql2 = "update Users set teamId = @teamid where employmentId = @employmentId;";
            await _data.SaveData(sql2, new { teamid = User.teamid, employmentId = Team.teamLeader }, _config.GetConnectionString("default"));

            Checker = "Team Created and users added!";

            if (checkRoleUser())
            {
                var sql3 = "update Users set role='Team Leader' where employmentId = @employmentId;";
                await _data.SaveData(sql3, new { employmentId = Team.teamLeader }, _config.GetConnectionString("default"));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            Checker = "Team already exists!";
        }
        return Team;
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateDB();
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Claims.SingleOrDefault(x => x.Type.Equals("unique_name")).Value;

        team = name;
    }
    protected async Task UpdateDB()
    {
        string sql = "select * from Users";
        people = await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        string sql2 = "select * from Teams";
        teams = await _data.LoadData<Team, dynamic>(sql2, new { }, _config.GetConnectionString("default"));
    }

    private async Task<int?> getTeamId(string teamName) 
    {
        var sql = "SELECT * FROM Teams WHERE teamName = @teamName;";
        teamdb = await _data.LoadData<TeamDto, dynamic>(sql, new { teamName = teamName }, _config.GetConnectionString("default"), true);
        int? teamid = teamdb.teamid;
        return teamid;
    }

    private bool checkRoleUser() 
    {
        //search each user in people for employmentId
        foreach (User user in people)
        {
            if (user.employmentId == teamDto.teamLeader)
            {
                if (user.role == "User")
                {
                    return true;
                }
            }
        }
        return false;
    }

    private async Task<bool> checkRoleTeamLeader()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var au = authstate.User;
        var name = au.Identity.Name;
        //search each user in people for employmentId
        foreach (User user in people)
        {
            if (user.employmentId == Int32.Parse(name))
            {
                if (user.role == "Team Leader")
                {
                    return true;
                }
            }
        }
        return false;
    }



    public async Task AddTeamMember(UserDto request)
    {

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Claims.SingleOrDefault(x => x.Type.Equals("unique_name")).Value;

        try
        {
            if (request.teamName == "" || request.teamName == null)
            {
                
                if (await checkRoleTeamLeader())
                {
                    var sql2 = "select teamId from Teams where teamName = @name;";
                    User.teamid = await _data.LoadData<int?, dynamic>(sql2, new { name = name }, _config.GetConnectionString("default"), true);
                    
                    var sql = "update Users set teamId = @teamid where employmentId = @employmentId;";
                    await _data.SaveData(sql, new { teamid = User.teamid, employmentId = request.employmentId }, _config.GetConnectionString("default"));
                    Checker = "Team member added!";
                }
                else
                {
                    Checker = "Team does not exist!";
                }
            }
            else { 
                User.teamid = await getTeamId(request.teamName);
                var sql = "update Users set teamId = @teamid where employmentId = @employmentId;";
                await _data.SaveData(sql, new { teamid = User.teamid, employmentId = request.employmentId }, _config.GetConnectionString("default"));
                Checker = "Team member added to " + request.teamName +"!";
            } 
            //Checker = "User added to team!";

        }

        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            Checker = "User is already in that team";
        }
    }

    private bool checkIFNullInt(string value) 
    {
        //if Null
        if (value == null) {
            return true;
        }
        return false;    
    }

    //Change team name
    public async Task ChangeTeamName(TeamDto request)
    {
        try
        {
            var sql = "update Teams set teamName = @teamName where teamid = @teamid;";
            await _data.SaveData(sql, new { teamName = request.teamName, teamid = request.teamid }, _config.GetConnectionString("default"));
            Checker = "Team name changed!";
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            Checker = "Team name already exists!";
        }
    }
}