@page "/userSettings"

@using BlazorTipz.Data
@using Microsoft.AspNetCore.Mvc
@using BlazorTipz.ViewModels.User

@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject IUserManager _userManager

<PageTitle>User Settings</PageTitle>

<h1 class="center">Change User Settings</h1>
<p class="d-flex justify-content-center">Change Firstname and Lastname</p>
<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="UserViewmodel" Data=userDto Submit=ChangeSettings>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Full name" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="name" @bind-Value=@userDto.name Class="w-100" />
                        <RadzenLengthValidator Component="name" Min="3" Text="Type a valid name" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Password" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="password" @bind-Value=@userDto.password Class="w-100" type="password" />
                        <RadzenLengthValidator Component="password" Min="8" Text="Password name should be at least 8 characters" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Repeat password" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="RepeatPassword" @bind-Value=@userDto.RepeatPassword Class="w-100" type="password" />
                        <RadzenLengthValidator Component="RepeatPassword" Min="8" Text="Password name should be at least 8 characters" Popup=@popup Style="position: absolute" />
                        <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(userDto.RepeatPassword)) Value=@userDto.password Component="RepeatPassword" Text="Passwords should be the same" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="center">
                    <h1>@Checker</h1>
                </div>
                <div class="center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                </div>
                <div class="center">
                    <RadzenButton Click="back" Text="Go back"></RadzenButton>
                </div>
            </RadzenTemplateForm>
        </div>
    </div>
</div>
@code {
    bool popup;
    
    public string Checker { get; set; }
    UserViewmodel userDto = new UserViewmodel();
    UserViewmodel? CUser;

    //checks if there is a current user
    protected override async Task OnInitializedAsync() {
        var CurrentUser = _userManager.getCurrentUser();
        if (CurrentUser == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else{
            CUser = CurrentUser;
        }
    }

    //changes the current user details
    public async Task<ActionResult<UserA>> ChangeSettings(UserViewmodel request){
        string err =  await _userManager.updateCurrentUser(request);
        if (err != null)
        {
            Checker = err;
            return new BadRequestObjectResult(Checker);
        }
        CUser = _userManager.getCurrentUser();
        if (CUser.password != request.RepeatPassword) { Checker = "not changed correctly, try again"; return new BadRequestObjectResult(Checker); }
        return CUser;
    }
    
    // navigate back to home, when used
    private void back() { NavigationManager.NavigateTo("/", true); }
    
}
