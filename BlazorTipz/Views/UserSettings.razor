@page "/userSettings"
@using DataLibrary
@using BlazorTipz.Data
@using Microsoft.AspNetCore.Mvc
@using System.Diagnostics
@using BlazorTipz.Components

@inject IDataAccess _data
@inject IConfiguration _config
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject AuthenticationComponent _auth
@inject TokenServerAuthenticationStateProvider GetAuthenticationStateAsync

<PageTitle>User Settings</PageTitle>

<h1 class="center">Change User Settings</h1>
<p class="d-flex justify-content-center">Change Firstname and Lastname</p>
<div class="container my-4">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="UserDto" Data=userDto Submit=ChangeSettings>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Full name" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="iName" @bind-Value=@userDto.iName Class="w-100" />
                        <RadzenLengthValidator Component="iName" Min="3" Text="Type a valid name" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Password" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="password" @bind-Value=@userDto.password Class="w-100" type="password" />
                        <RadzenLengthValidator Component="password" Min="8" Text="Password name should be at least 8 characters" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Repeat password" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="RepeatPassword" @bind-Value=@userDto.RepeatPassword Class="w-100" type="password" />
                        <RadzenLengthValidator Component="RepeatPassword" Min="8" Text="Password name should be at least 8 characters" Popup=@popup Style="position: absolute" />
                        <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(userDto.RepeatPassword)) Value=@userDto.password Component="RepeatPassword" Text="Passwords should be the same" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                </div>
                <div class="center">
                    <RadzenButton Click="back" Text="Go back"></RadzenButton>
                </div>
            </RadzenTemplateForm>
        </div>
    </div>
</div>
@code {
    bool popup;
    UserDto userDto = new UserDto();
    User User = new User();

    //Change users in database
    public async Task<ActionResult<User>> ChangeSettings(UserDto request)
    {
        _auth.CreatePasswordHash(request.password, out byte[] passwordHash, out byte[] passwordSalt);

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        User.employmentId = Int32.Parse(name);
        User.iName = request.iName;
        User.passwordHash = passwordHash;
        User.passwordSalt = passwordSalt;


        var sql = "update Users set iName=@iName, passwordHash=@passwordHash, passwordSalt=@passwordSalt where employmentId=@employmentId;";

        await _data.SaveData(sql, new { employmentId = User.employmentId, iName = User.iName, passwordSalt = User.passwordSalt, passwordHash = User.passwordHash }, _config.GetConnectionString("default"));
        NavigationManager.NavigateTo("/", true);
        return User;
    }

    private void back() { NavigationManager.NavigateTo("/", true); }

}
