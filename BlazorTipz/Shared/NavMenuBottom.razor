@using BlazorTipz.Components
@using BlazorTipz.ViewModels.User;
@using BlazorTipz.ViewModels.Team;

@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject IUserManager _userManager
@inject ITeamManager _teamManager
@inject IJSRuntime JsRuntime

<link href='https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css' rel='stylesheet'>
<link rel="stylesheet" href="css/Navbar.css" />
<AuthorizeView>
    <Authorized>
        <!--=============== NAV ===============-->
        <div class="nav" id="nav">
            <nav class="nav__content">

                <div class="nav__list">
                    <a href="/" class="nav__link active-link">
                        <i class='bx bx-grid-alt'></i>
                    </a>
                    <a href="/suggestion" class="nav__add active-link">
                        <i class='bx bx-plus-circle'></i>
                    </a>
                    <a href="/" class="nav__link active-link">
                        <i class='bx bx-bar-chart-alt-2'></i>
                    </a>

                </div>
            </nav>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    public UserViewmodel currentUser = new UserViewmodel();
    public TeamViewmodel currentTeam = new TeamViewmodel();

    public string TeamCheck { get; set; }
    public string team { get; set; }

    public async Task Logout()
    {
        await _localStorage.RemoveItemAsync("token");
        NavigationManager.NavigateTo("/login", true);
        _userManager.logout();
    }
    private void Home() { NavigationManager.NavigateTo("/"); }
    private void Settings() { NavigationManager.NavigateTo("/userSettings"); }

    //Get team from user
    protected override async Task OnInitializedAsync()
    {

        var token = await _localStorage.GetItemAsync<string>("token");
        if (token != null)
        {
            (UserViewmodel user, string err) = await _userManager.getCurrentUser(token);
            TeamViewmodel team = await _teamManager.getTeam(user.teamId);
            if (err != null) { return; }
            currentUser = user;
            currentTeam = team;

        }
    }

    //Check if string is null or empty
    public bool IsNullOrEmpty(string str)
    {
        return string.IsNullOrEmpty(str);
    }

    //Return string if not null or empty
    public string ReturnString(string str)
    {
        if (string.IsNullOrEmpty(str))
        {
            return "";
        }
        else
        {
            return str;
        }
    }

    public string ReturnStringU(string str)
    {
        if (string.IsNullOrEmpty(str))
        {
            return "";
        }
        else
        {
            return ": " + str;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("import", "./js/main.js");
        }
    }

}
